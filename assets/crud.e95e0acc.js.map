{"version":3,"mappings":"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","names":[],"sources":["../../src/hooks/useCrud.ts","../../src/views/util/crud.vue"],"sourcesContent":["import { ref, Ref, reactive, computed } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { isFunction } from 'lodash-es';\n\ninterface CrudOption {\n\trowKey?: string;\n\tsourcePath: string;\n\t// api: any;\n\t// option: any;\n\n\tlist?: string;\n\tadd?: string;\n\tupdate?: string;\n\tdel?: string;\n\n\tres?: (data: any) => any;\n\n\tlistAfter?: (data: any[]) => void;\n\tlistBefore?: () => void;\n\taddAfter?: (data?: any[]) => void;\n\taddBefore?: () => void;\n\tupdateAfter?: (data?: any[]) => void;\n\tupdateBefore?: () => void;\n\tdelAfter?: (data: any, row: any, index: number) => void;\n\tdelBefore?: () => void;\n\n\ttotalKey?: string;\n\tdataKey?: string;\n}\nlet optionObj = import.meta.glob(`../option/**/**`);\nlet apiObj = import.meta.glob(`../api/**/**`);\n// let optionO = optionObj[`../option/${option.sourcePath}.ts`];\n// let apiO = apiObj[`../api/${option.sourcePath}.ts`];\n// import * as api from '@/api/crud/index';\n// import avueOption from '@/option/crud/index';\n\n/**\n * 表单基本逻辑\n */\nexport const useCrud = (option: CrudOption) => {\n\tlet optionO = optionObj[`../option/${option.sourcePath}.ts`];\n\tlet apiO = apiObj[`../api/${option.sourcePath}.ts`];\n\tconst list = ref([]);\n\tlet form = ref({});\n\tlet params = reactive({});\n\tlet avueOption = ref({});\n\tlet api = reactive({});\n\tlet crud: Ref<HTMLElement | undefined> = ref();\n\tlet loading = ref(false);\n\tconst page = ref({\n\t\tcurrent: 1,\n\t\tsize: 20,\n\t\ttotal: 0\n\t});\n\n\tconsole.log(api);\n\n\tconst bindVal = computed(() => {\n\t\treturn {\n\t\t\tref: 'crud',\n\t\t\toption: avueOption.value,\n\t\t\tdata: list.value,\n\t\t\ttableLoading: loading.value\n\t\t};\n\t});\n\tconst onEvent = computed(() => {\n\t\treturn {\n\t\t\t'size-change': sizeChange,\n\t\t\t'current-change': currentChange,\n\t\t\t'row-save': rowSave,\n\t\t\t'row-update': rowUpdate,\n\t\t\t'row-del': rowDel,\n\t\t\t'refresh-change': refreshChange,\n\t\t\t'search-reset': searchChange,\n\t\t\t'search-change': searchChange\n\t\t};\n\t});\n\tconst rowKey = computed(() => {\n\t\treturn option.rowKey || 'id';\n\t});\n\toptionO().then(mode => {\n\t\tavueOption.value = mode.default();\n\t});\n\tapiO().then(mode => {\n\t\tapi = mode;\n\t\tgetList();\n\t});\n\t// * 分页数据请求\n\tconst getList = () => {\n\t\tconst callback = () => {\n\t\t\tloading.value = true;\n\t\t\tconst paramsObj = Object.assign({ current: page.value.current, size: page.value.size }, params);\n\t\t\tlist.value = [];\n\t\t\tapi[option.list || 'list'](paramsObj)\n\t\t\t\t.then((res: any) => {\n\t\t\t\t\tloading.value = false;\n\t\t\t\t\tlet data;\n\t\t\t\t\tif (option.res) {\n\t\t\t\t\t\tdata = option.res(res.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdata = res.data;\n\t\t\t\t\t}\n\t\t\t\t\tpage.value.total = data[option.totalKey || 'total'];\n\t\t\t\t\tconst result = data[option.dataKey || 'data'];\n\t\t\t\t\tlist.value = result;\n\t\t\t\t\tif (isFunction(option.listAfter)) {\n\t\t\t\t\t\toption.listAfter(data);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tloading.value = false;\n\t\t\t\t});\n\t\t};\n\t\tif (isFunction(option.listBefore)) {\n\t\t\toption.listBefore();\n\t\t}\n\t\tcallback();\n\t};\n\t// * 数据保存请求\n\tconst rowSave = (row: any, done: () => void, loading: () => void) => {\n\t\tconst callback = () => {\n\t\t\tReflect.deleteProperty(form.value, 'params');\n\t\t\tapi[option.add || 'add'](form.value)\n\t\t\t\t.then((data: any) => {\n\t\t\t\t\tgetList();\n\t\t\t\t\tif (option.addAfter) {\n\t\t\t\t\t\toption.addAfter(data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tElMessage.success('新增成功');\n\t\t\t\t\t}\n\t\t\t\t\tdone();\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tloading();\n\t\t\t\t});\n\t\t};\n\t\tif (option.addBefore) {\n\t\t\toption.addBefore();\n\t\t}\n\t\tcallback();\n\t};\n\tconst rowUpdate = (row: any, index: number, done: () => void, loading: () => void) => {\n\t\tconst callback = () => {\n\t\t\tReflect.deleteProperty(form.value, 'params');\n\t\t\tapi[option.update || 'update'](form.value)\n\t\t\t\t.then((data: any) => {\n\t\t\t\t\tgetList();\n\t\t\t\t\tif (option.updateAfter) {\n\t\t\t\t\t\toption.updateAfter(data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tElMessage.success('更新成功');\n\t\t\t\t\t}\n\t\t\t\t\tdone();\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tloading();\n\t\t\t\t});\n\t\t};\n\t\tif (option.updateBefore) {\n\t\t\toption.updateBefore();\n\t\t}\n\t\tcallback();\n\t};\n\tconst rowDel = (row: any, index: number) => {\n\t\tconst callback = () => {\n\t\t\tapi[option.del || 'del'](row[rowKey.value], row).then((data: any) => {\n\t\t\t\tgetList();\n\t\t\t\tif (option.delAfter) {\n\t\t\t\t\toption.delAfter(data, row, index);\n\t\t\t\t} else {\n\t\t\t\t\tElMessage.success('删除成功');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tif (option.delBefore) {\n\t\t\toption.delBefore();\n\t\t\tcallback();\n\t\t} else {\n\t\t\tElMessageBox.confirm(`此操作将永久删除序号【${index}】的数据, 是否继续?`, '提示', {\n\t\t\t\tconfirmButtonText: '确定',\n\t\t\t\tcancelButtonText: '取消',\n\t\t\t\ttype: 'warning'\n\t\t\t}).then(() => {\n\t\t\t\tcallback();\n\t\t\t});\n\t\t}\n\t};\n\tconst searchChange = (params: any, done: () => void) => {\n\t\tif (done) done();\n\t\tparams = params;\n\t\tpage.value.current = 1;\n\t\tgetList();\n\t};\n\tconst refreshChange = () => {\n\t\tgetList();\n\t};\n\tconst sizeChange = (val: number) => {\n\t\tpage.value.current = 1;\n\t\tpage.value.size = val;\n\t\tgetList();\n\t};\n\tconst currentChange = (val: number) => {\n\t\tpage.value.current = val;\n\t\tgetList();\n\t};\n\tconsole.log('-=-=-=-=-=', bindVal.value.option);\n\n\treturn { bindVal, onEvent, rowKey, crud, refreshChange, page, form };\n};\n","<template>\n\t<basic-container>\n\t\t<avue-crud v-bind=\"bindVal\" v-on=\"onEvent\" v-model:page=\"page\" v-model=\"form\"> </avue-crud>\n\t</basic-container>\n</template>\n\n<script lang=\"ts\" setup>\nimport { useCrud } from '@/hooks/useCrud';\nimport { onMounted } from 'vue';\n// import { getCurrentInstance, onMounted } from 'vue';\n// const instance = getCurrentInstance();\n\nlet { bindVal, onEvent, page, form, crud } = useCrud({\n\t// api,\n\t// option: option(),\n\tsourcePath: 'crud/index'\n});\nonMounted(() => {\n\tconsole.log(crud.value);\n});\n</script>\n\n<style lang=\"scss\" scoped></style>\n"],"file":"assets/crud.e95e0acc.js"}