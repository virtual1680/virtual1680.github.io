{"version":3,"mappings":"sDA0BA,WAAoBA,GACd,IAACC,EAASD,GACL,SAIL,MAAME,EAAWF,GACrB,MA5BY,qBA4BLG,GA3BI,8BA2BcA,GA7BZ,0BA6B6BA,GA1B7B,kBA0BgDA,ECJ/D,gFACAC,6bASO,oDC3BP,8CD2BO,KACN,wCACAC,iCACA,QAAaC,IAAIC,QACjB,MAAWD,IAAIC,QACfC,EAAaF,IAASG,aACtBC,EAAiBJ,IAAIC,QACrBI,EAAUL,IAASG,aACnBG,EAAyCN,IAAIC,MAC7CM,EAAcP,YACd,QAAaA,IAAIC,eACPO,QACHC,UAMPC,EAAgBV,mBACf,CAAOC,WACDU,eACcC,aACRC,yBAIbC,EAAgBd,mBACf,CAAO,gBACS,mBACG,aACN,eACE,YACH,mBACO,iBACF,sBAIlBe,EAAef,kBACdW,iBAEDK,cACCZ,uBAEDL,cACCM,WAID,aAyBCY,iBACCN,eAzBD,MACCJ,WACA,qEACAW,WACAb,+BAGE,MADAE,WAGCK,EADDD,MACCA,cAEAQ,OAEDC,qCACA,6BACAF,UACAD,gBACCN,kBACDU,cAGAd,mBASJe,YAiBCX,aACCA,cAhBAY,yCACAlB,uCAGEM,WACCA,cAEAa,6CAEIC,oBAWTC,cAiBCf,gBACCA,iBAhBAY,yCACAlB,6CAGEM,cACCA,iBAEAa,6CAEIC,oBAWTE,UACC,aACCtB,4CAECM,WACCA,kBAEAa,0CAIHb,aACCA,mBAGaa,oEAAgDI,uBACzCC,sBACDC,iBACZC,mBAMTC,UACCC,OAEAb,uBAGDc,YAGAC,MACCf,kBACAA,oBAGDgB,MACChB,uBAKD,OAFAV,eAEA,qECnMD2B,mCAKArC,oBACAM","names":["value","isObject","baseGetTag","tag","apiObj","apiO","Vue","ref","params","reactive","avueOption","api","crud","loading","size","total","bindVal","option","data","tableLoading","onEvent","rowKey","optionO","isFunction","list","res","page","finally","rowSave","Reflect","ElementPlus","catch","rowUpdate","rowDel","confirmButtonText","cancelButtonText","type","then","searchChange","done","refreshChange","sizeChange","currentChange","useCrud"],"sources":["../../node_modules/lodash-es/isFunction.js","../../src/hooks/useCrud.ts","../../src/views/util/crud.vue"],"sourcesContent":["import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import { ref, Ref, reactive, computed } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { isFunction } from 'lodash-es';\n\ninterface CrudOption {\n\trowKey?: string;\n\tsourcePath: string;\n\t// api: any;\n\t// option: any;\n\n\tlist?: string;\n\tadd?: string;\n\tupdate?: string;\n\tdel?: string;\n\n\tres?: (data: any) => any;\n\n\tlistAfter?: (data: any[]) => void;\n\tlistBefore?: () => void;\n\taddAfter?: (data?: any[]) => void;\n\taddBefore?: () => void;\n\tupdateAfter?: (data?: any[]) => void;\n\tupdateBefore?: () => void;\n\tdelAfter?: (data: any, row: any, index: number) => void;\n\tdelBefore?: () => void;\n\n\ttotalKey?: string;\n\tdataKey?: string;\n}\nlet optionObj = import.meta.glob(`../option/**/**`);\nlet apiObj = import.meta.glob(`../api/**/**`);\n// let optionO = optionObj[`../option/${option.sourcePath}.ts`];\n// let apiO = apiObj[`../api/${option.sourcePath}.ts`];\n// import * as api from '@/api/crud/index';\n// import avueOption from '@/option/crud/index';\n\n/**\n * 表单基本逻辑\n */\nexport const useCrud = (option: CrudOption) => {\n\tlet optionO = optionObj[`../option/${option.sourcePath}.ts`];\n\tlet apiO = apiObj[`../api/${option.sourcePath}.ts`];\n\tconst list = ref([]);\n\tlet form = ref({});\n\tlet params = reactive({});\n\tlet avueOption = ref({});\n\tlet api = reactive({});\n\tlet crud: Ref<HTMLElement | undefined> = ref();\n\tlet loading = ref(false);\n\tconst page = ref({\n\t\tcurrent: 1,\n\t\tsize: 20,\n\t\ttotal: 0\n\t});\n\n\tconsole.log(api);\n\n\tconst bindVal = computed(() => {\n\t\treturn {\n\t\t\tref: 'crud',\n\t\t\toption: avueOption.value,\n\t\t\tdata: list.value,\n\t\t\ttableLoading: loading.value\n\t\t};\n\t});\n\tconst onEvent = computed(() => {\n\t\treturn {\n\t\t\t'size-change': sizeChange,\n\t\t\t'current-change': currentChange,\n\t\t\t'row-save': rowSave,\n\t\t\t'row-update': rowUpdate,\n\t\t\t'row-del': rowDel,\n\t\t\t'refresh-change': refreshChange,\n\t\t\t'search-reset': searchChange,\n\t\t\t'search-change': searchChange\n\t\t};\n\t});\n\tconst rowKey = computed(() => {\n\t\treturn option.rowKey || 'id';\n\t});\n\toptionO().then(mode => {\n\t\tavueOption.value = mode.default();\n\t});\n\tapiO().then(mode => {\n\t\tapi = mode;\n\t\tgetList();\n\t});\n\t// * 分页数据请求\n\tconst getList = () => {\n\t\tconst callback = () => {\n\t\t\tloading.value = true;\n\t\t\tconst paramsObj = Object.assign({ current: page.value.current, size: page.value.size }, params);\n\t\t\tlist.value = [];\n\t\t\tapi[option.list || 'list'](paramsObj)\n\t\t\t\t.then((res: any) => {\n\t\t\t\t\tloading.value = false;\n\t\t\t\t\tlet data;\n\t\t\t\t\tif (option.res) {\n\t\t\t\t\t\tdata = option.res(res.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdata = res.data;\n\t\t\t\t\t}\n\t\t\t\t\tpage.value.total = data[option.totalKey || 'total'];\n\t\t\t\t\tconst result = data[option.dataKey || 'data'];\n\t\t\t\t\tlist.value = result;\n\t\t\t\t\tif (isFunction(option.listAfter)) {\n\t\t\t\t\t\toption.listAfter(data);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tloading.value = false;\n\t\t\t\t});\n\t\t};\n\t\tif (isFunction(option.listBefore)) {\n\t\t\toption.listBefore();\n\t\t}\n\t\tcallback();\n\t};\n\t// * 数据保存请求\n\tconst rowSave = (row: any, done: () => void, loading: () => void) => {\n\t\tconst callback = () => {\n\t\t\tReflect.deleteProperty(form.value, 'params');\n\t\t\tapi[option.add || 'add'](form.value)\n\t\t\t\t.then((data: any) => {\n\t\t\t\t\tgetList();\n\t\t\t\t\tif (option.addAfter) {\n\t\t\t\t\t\toption.addAfter(data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tElMessage.success('新增成功');\n\t\t\t\t\t}\n\t\t\t\t\tdone();\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tloading();\n\t\t\t\t});\n\t\t};\n\t\tif (option.addBefore) {\n\t\t\toption.addBefore();\n\t\t}\n\t\tcallback();\n\t};\n\tconst rowUpdate = (row: any, index: number, done: () => void, loading: () => void) => {\n\t\tconst callback = () => {\n\t\t\tReflect.deleteProperty(form.value, 'params');\n\t\t\tapi[option.update || 'update'](form.value)\n\t\t\t\t.then((data: any) => {\n\t\t\t\t\tgetList();\n\t\t\t\t\tif (option.updateAfter) {\n\t\t\t\t\t\toption.updateAfter(data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tElMessage.success('更新成功');\n\t\t\t\t\t}\n\t\t\t\t\tdone();\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tloading();\n\t\t\t\t});\n\t\t};\n\t\tif (option.updateBefore) {\n\t\t\toption.updateBefore();\n\t\t}\n\t\tcallback();\n\t};\n\tconst rowDel = (row: any, index: number) => {\n\t\tconst callback = () => {\n\t\t\tapi[option.del || 'del'](row[rowKey.value], row).then((data: any) => {\n\t\t\t\tgetList();\n\t\t\t\tif (option.delAfter) {\n\t\t\t\t\toption.delAfter(data, row, index);\n\t\t\t\t} else {\n\t\t\t\t\tElMessage.success('删除成功');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tif (option.delBefore) {\n\t\t\toption.delBefore();\n\t\t\tcallback();\n\t\t} else {\n\t\t\tElMessageBox.confirm(`此操作将永久删除序号【${index}】的数据, 是否继续?`, '提示', {\n\t\t\t\tconfirmButtonText: '确定',\n\t\t\t\tcancelButtonText: '取消',\n\t\t\t\ttype: 'warning'\n\t\t\t}).then(() => {\n\t\t\t\tcallback();\n\t\t\t});\n\t\t}\n\t};\n\tconst searchChange = (params: any, done: () => void) => {\n\t\tif (done) done();\n\t\tparams = params;\n\t\tpage.value.current = 1;\n\t\tgetList();\n\t};\n\tconst refreshChange = () => {\n\t\tgetList();\n\t};\n\tconst sizeChange = (val: number) => {\n\t\tpage.value.current = 1;\n\t\tpage.value.size = val;\n\t\tgetList();\n\t};\n\tconst currentChange = (val: number) => {\n\t\tpage.value.current = val;\n\t\tgetList();\n\t};\n\tconsole.log('-=-=-=-=-=', bindVal.value.option);\n\n\treturn { bindVal, onEvent, rowKey, crud, refreshChange, page, form };\n};\n","<template>\n\t<basic-container>\n\t\t<avue-crud v-bind=\"bindVal\" v-on=\"onEvent\" v-model:page=\"page\" v-model=\"form\"> </avue-crud>\n\t</basic-container>\n</template>\n\n<script lang=\"ts\" setup>\nimport { useCrud } from '@/hooks/useCrud';\nimport { onMounted } from 'vue';\n// import { getCurrentInstance, onMounted } from 'vue';\n// const instance = getCurrentInstance();\n\nlet { bindVal, onEvent, page, form, crud } = useCrud({\n\t// api,\n\t// option: option(),\n\tsourcePath: 'crud/index'\n});\nonMounted(() => {\n\tconsole.log(crud.value);\n});\n</script>\n\n<style lang=\"scss\" scoped></style>\n"],"file":"assets/crud.cd23f4fd.js"}